module Problem25

// What is the first term in the Fibonacci sequence to contain 1000 digits?

// At http://theburningmonk.com/2010/09/project-euler-problem-25-solution/ I find two interesting
// solutions. The first one makes good sense, and is easy to read.

let fibs =
    Seq.unfold (fun (current, next) -> Some(current, (next, current + next))) (0I, 1I)
    |> Seq.filter (fun f -> f > 0I)

let answer = (Seq.findIndex (fun f -> f.ToString().Length >= 1000) fibs) + 1 // 4782.
// Real: 00:00:00.217, CPU: 00:00:00.218, GC gen0: 5, gen1: 1, gen2: 0
// That's pretty fast.

let p25 =
    let rec loop i n1 n2 =
        match n2 with
        | n when n > 10I**999 -> (i, n2)
        | n                   -> loop (i+1I) n2 (n1+n2)
    loop 2I 1I 1I // (4782, 1070066266382758936764980584457396885083683896632151665013235203375314520604694040621889147582489792657804694888177591957484336466672569959512996030461262748092482186144069433051234774442750273781753087579391666192149259186759553966422837148943113074699503439547001985432609723067290192870526447243726117715821825548491120525013201478612965931381792235559657452039506137551467837543229119602129934048260706175397706847068202895486902666185435124521900369480641357447470911707619766945691070098024393439617474103736912503231365532164773697023167755051595173518460579954919410967778373229665796581646513903488154256310184224190259846088000110186255550245493937113651657039447629584714548523425950428582425306083544435428212611008992863795048006894330309773217834864543113205765659868456288616808718693835297350643986297640660000723562917905207051164077614812491885830945940566688339109350944456576357666151619317753792891661581327159616877487983821820492520348473874384736771934512787029218636250627816).

// Real: 00:00:00.169, CPU: 00:00:00.171, GC gen0: 6, gen1: 0, gen2: 0
// Wow. Even faster.

// I didn't get the reasoning behind 10^999. I found it at
// http://www.mathblog.dk/project-euler-25-fibonacci-sequence-1000-digits/:
//
// Finding a number with at least 1000 digits is the same as finding a number larger than or equal to
// 10^999. Ah ha!