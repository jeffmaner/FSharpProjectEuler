module Problem29

// How many distinct terms are in the sequence generated by a^b for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?
//
// Consider all integer combinations of a^b for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:
//
//    2^2=4, 2^3=8, 2^4=16, 2^5=32
//    3^2=9, 3^3=27, 3^4=81, 3^5=243
//    4^2=16, 4^3=64, 4^4=256, 4^5=1024
//    5^2=25, 5^3=125, 5^4=625, 5^5=3125
//
// If they are then placed in numerical order, with any repeats removed, we get the following sequence
// of 15 distinct terms:
//
// 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
//
// How many distinct terms are in the sequence generated by a^b for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?


// From http://theburningmonk.com/2010/09/project-euler-problem-29-solution/:

let getCombos a b = [2I..a] |> List.collect (fun x -> [2..b] |> List.map (fun y -> (x,y)))

let answer =
    getCombos 100I 100
    |> List.map (fun (a,b) -> pown a b)
    |> List.sort
    |> Seq.distinct
    |> Seq.length // 9183.
// Real: 00:00:00.449, CPU: 00:00:00.202, GC gen0: 2, gen1: 1, gen2: 0


// From http://fsharp-euler.wikispaces.com/euler+029:
let problem29 =
    seq { for a=2 to 100 do for b=2 to 100 do yield (a,b) }
    |> Seq.distinctBy (fun (a,b) -> bigint.Pow(bigint a,b))
    |> Seq.length // 9183.
// Real: 00:00:00.037, CPU: 00:00:00.046, GC gen0: 0, gen1: 0, gen2: 0


// From http://www.haskell.org/haskellwiki/Euler_problems/21_to_30:
//import List
//problem_29 = length $ nub [x^y | x <- [2..100], y <- [2..100]]
let problem_29 =
    {2..100}
    |> Seq.map (fun x -> {2..100}
                         |> Seq.map (fun y -> pown x y))
    |> Seq.distinct
    |> Seq.length // 99. Woops.